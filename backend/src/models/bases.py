# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseFacebookPage(_PrismaModel):
    __prisma_model__: ClassVar[Literal['FacebookPage']] = 'FacebookPage'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.FacebookPageActions[_PrismaModelT]':
        from .client import get_client

        return actions.FacebookPageActions[_PrismaModelT](client or get_client(), cls)


class BaseFacebookPost(_PrismaModel):
    __prisma_model__: ClassVar[Literal['FacebookPost']] = 'FacebookPost'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.FacebookPostActions[_PrismaModelT]':
        from .client import get_client

        return actions.FacebookPostActions[_PrismaModelT](client or get_client(), cls)


class BaseWhatsappNumber(_PrismaModel):
    __prisma_model__: ClassVar[Literal['WhatsappNumber']] = 'WhatsappNumber'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WhatsappNumberActions[_PrismaModelT]':
        from .client import get_client

        return actions.WhatsappNumberActions[_PrismaModelT](client or get_client(), cls)


class BaseWhatsappTemplate(_PrismaModel):
    __prisma_model__: ClassVar[Literal['WhatsappTemplate']] = 'WhatsappTemplate'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WhatsappTemplateActions[_PrismaModelT]':
        from .client import get_client

        return actions.WhatsappTemplateActions[_PrismaModelT](client or get_client(), cls)


class BaseLead(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Lead']] = 'Lead'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LeadActions[_PrismaModelT]':
        from .client import get_client

        return actions.LeadActions[_PrismaModelT](client or get_client(), cls)


class BaseTag(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Tag']] = 'Tag'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TagActions[_PrismaModelT]':
        from .client import get_client

        return actions.TagActions[_PrismaModelT](client or get_client(), cls)


class BaseLeadTag(_PrismaModel):
    __prisma_model__: ClassVar[Literal['LeadTag']] = 'LeadTag'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LeadTagActions[_PrismaModelT]':
        from .client import get_client

        return actions.LeadTagActions[_PrismaModelT](client or get_client(), cls)


class BaseMessage(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Message']] = 'Message'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MessageActions[_PrismaModelT]':
        from .client import get_client

        return actions.MessageActions[_PrismaModelT](client or get_client(), cls)


class BaseCampaign(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Campaign']] = 'Campaign'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CampaignActions[_PrismaModelT]':
        from .client import get_client

        return actions.CampaignActions[_PrismaModelT](client or get_client(), cls)


class BaseAuditLog(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AuditLog']] = 'AuditLog'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AuditLogActions[_PrismaModelT]':
        from .client import get_client

        return actions.AuditLogActions[_PrismaModelT](client or get_client(), cls)


class BaseApiKey(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ApiKey']] = 'ApiKey'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ApiKeyActions[_PrismaModelT]':
        from .client import get_client

        return actions.ApiKeyActions[_PrismaModelT](client or get_client(), cls)


class BaseRateLimit(_PrismaModel):
    __prisma_model__: ClassVar[Literal['RateLimit']] = 'RateLimit'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RateLimitActions[_PrismaModelT]':
        from .client import get_client

        return actions.RateLimitActions[_PrismaModelT](client or get_client(), cls)


