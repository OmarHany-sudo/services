# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/home/ubuntu/controls-tools-platform/backend/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'debian-openssl-3.0.x': '/home/ubuntu/.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/prisma/query-engine-debian-openssl-3.0.x'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    user: 'actions.UserActions[models.User]'
    facebookpage: 'actions.FacebookPageActions[models.FacebookPage]'
    facebookpost: 'actions.FacebookPostActions[models.FacebookPost]'
    whatsappnumber: 'actions.WhatsappNumberActions[models.WhatsappNumber]'
    whatsapptemplate: 'actions.WhatsappTemplateActions[models.WhatsappTemplate]'
    lead: 'actions.LeadActions[models.Lead]'
    tag: 'actions.TagActions[models.Tag]'
    leadtag: 'actions.LeadTagActions[models.LeadTag]'
    message: 'actions.MessageActions[models.Message]'
    campaign: 'actions.CampaignActions[models.Campaign]'
    auditlog: 'actions.AuditLogActions[models.AuditLog]'
    apikey: 'actions.ApiKeyActions[models.ApiKey]'
    ratelimit: 'actions.RateLimitActions[models.RateLimit]'

    __slots__ = (
        'user',
        'facebookpage',
        'facebookpost',
        'whatsappnumber',
        'whatsapptemplate',
        'lead',
        'tag',
        'leadtag',
        'message',
        'campaign',
        'auditlog',
        'apikey',
        'ratelimit',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.user = actions.UserActions[models.User](self, models.User)
        self.facebookpage = actions.FacebookPageActions[models.FacebookPage](self, models.FacebookPage)
        self.facebookpost = actions.FacebookPostActions[models.FacebookPost](self, models.FacebookPost)
        self.whatsappnumber = actions.WhatsappNumberActions[models.WhatsappNumber](self, models.WhatsappNumber)
        self.whatsapptemplate = actions.WhatsappTemplateActions[models.WhatsappTemplate](self, models.WhatsappTemplate)
        self.lead = actions.LeadActions[models.Lead](self, models.Lead)
        self.tag = actions.TagActions[models.Tag](self, models.Tag)
        self.leadtag = actions.LeadTagActions[models.LeadTag](self, models.LeadTag)
        self.message = actions.MessageActions[models.Message](self, models.Message)
        self.campaign = actions.CampaignActions[models.Campaign](self, models.Campaign)
        self.auditlog = actions.AuditLogActions[models.AuditLog](self, models.AuditLog)
        self.apikey = actions.ApiKeyActions[models.ApiKey](self, models.ApiKey)
        self.ratelimit = actions.RateLimitActions[models.RateLimit](self, models.RateLimit)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': '/home/ubuntu/controls-tools-platform/backend/prisma/schema.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    user: 'UserBatchActions'
    facebookpage: 'FacebookPageBatchActions'
    facebookpost: 'FacebookPostBatchActions'
    whatsappnumber: 'WhatsappNumberBatchActions'
    whatsapptemplate: 'WhatsappTemplateBatchActions'
    lead: 'LeadBatchActions'
    tag: 'TagBatchActions'
    leadtag: 'LeadTagBatchActions'
    message: 'MessageBatchActions'
    campaign: 'CampaignBatchActions'
    auditlog: 'AuditLogBatchActions'
    apikey: 'ApiKeyBatchActions'
    ratelimit: 'RateLimitBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.user = UserBatchActions(self)
        self.facebookpage = FacebookPageBatchActions(self)
        self.facebookpost = FacebookPostBatchActions(self)
        self.whatsappnumber = WhatsappNumberBatchActions(self)
        self.whatsapptemplate = WhatsappTemplateBatchActions(self)
        self.lead = LeadBatchActions(self)
        self.tag = TagBatchActions(self)
        self.leadtag = LeadTagBatchActions(self)
        self.message = MessageBatchActions(self)
        self.campaign = CampaignBatchActions(self)
        self.auditlog = AuditLogBatchActions(self)
        self.apikey = ApiKeyBatchActions(self)
        self.ratelimit = RateLimitBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.User,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.User,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.User,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.User,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.User,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.User,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FacebookPageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FacebookPageCreateInput,
        include: Optional[types.FacebookPageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.FacebookPage,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FacebookPageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.FacebookPage,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FacebookPageWhereUniqueInput,
        include: Optional[types.FacebookPageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.FacebookPage,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FacebookPageUpdateInput,
        where: types.FacebookPageWhereUniqueInput,
        include: Optional[types.FacebookPageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.FacebookPage,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FacebookPageWhereUniqueInput,
        data: types.FacebookPageUpsertInput,
        include: Optional[types.FacebookPageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.FacebookPage,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FacebookPageUpdateManyMutationInput,
        where: types.FacebookPageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.FacebookPage,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FacebookPageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.FacebookPage,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class FacebookPostBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.FacebookPostCreateInput,
        include: Optional[types.FacebookPostInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.FacebookPost,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.FacebookPostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.FacebookPost,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.FacebookPostWhereUniqueInput,
        include: Optional[types.FacebookPostInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.FacebookPost,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.FacebookPostUpdateInput,
        where: types.FacebookPostWhereUniqueInput,
        include: Optional[types.FacebookPostInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.FacebookPost,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.FacebookPostWhereUniqueInput,
        data: types.FacebookPostUpsertInput,
        include: Optional[types.FacebookPostInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.FacebookPost,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.FacebookPostUpdateManyMutationInput,
        where: types.FacebookPostWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.FacebookPost,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.FacebookPostWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.FacebookPost,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class WhatsappNumberBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.WhatsappNumberCreateInput,
        include: Optional[types.WhatsappNumberInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.WhatsappNumber,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.WhatsappNumberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.WhatsappNumber,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.WhatsappNumberWhereUniqueInput,
        include: Optional[types.WhatsappNumberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.WhatsappNumber,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.WhatsappNumberUpdateInput,
        where: types.WhatsappNumberWhereUniqueInput,
        include: Optional[types.WhatsappNumberInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.WhatsappNumber,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.WhatsappNumberWhereUniqueInput,
        data: types.WhatsappNumberUpsertInput,
        include: Optional[types.WhatsappNumberInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.WhatsappNumber,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.WhatsappNumberUpdateManyMutationInput,
        where: types.WhatsappNumberWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.WhatsappNumber,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.WhatsappNumberWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.WhatsappNumber,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class WhatsappTemplateBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.WhatsappTemplateCreateInput,
        include: Optional[types.WhatsappTemplateInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.WhatsappTemplate,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.WhatsappTemplateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.WhatsappTemplate,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.WhatsappTemplateWhereUniqueInput,
        include: Optional[types.WhatsappTemplateInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.WhatsappTemplate,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.WhatsappTemplateUpdateInput,
        where: types.WhatsappTemplateWhereUniqueInput,
        include: Optional[types.WhatsappTemplateInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.WhatsappTemplate,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.WhatsappTemplateWhereUniqueInput,
        data: types.WhatsappTemplateUpsertInput,
        include: Optional[types.WhatsappTemplateInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.WhatsappTemplate,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.WhatsappTemplateUpdateManyMutationInput,
        where: types.WhatsappTemplateWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.WhatsappTemplate,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.WhatsappTemplateWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.WhatsappTemplate,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class LeadBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.LeadCreateInput,
        include: Optional[types.LeadInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Lead,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.LeadCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Lead,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.LeadWhereUniqueInput,
        include: Optional[types.LeadInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Lead,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.LeadUpdateInput,
        where: types.LeadWhereUniqueInput,
        include: Optional[types.LeadInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Lead,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.LeadWhereUniqueInput,
        data: types.LeadUpsertInput,
        include: Optional[types.LeadInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Lead,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.LeadUpdateManyMutationInput,
        where: types.LeadWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Lead,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.LeadWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Lead,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class TagBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.TagCreateInput,
        include: Optional[types.TagInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Tag,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.TagCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Tag,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.TagWhereUniqueInput,
        include: Optional[types.TagInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Tag,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.TagUpdateInput,
        where: types.TagWhereUniqueInput,
        include: Optional[types.TagInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Tag,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.TagWhereUniqueInput,
        data: types.TagUpsertInput,
        include: Optional[types.TagInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Tag,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.TagUpdateManyMutationInput,
        where: types.TagWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Tag,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.TagWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Tag,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class LeadTagBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.LeadTagCreateInput,
        include: Optional[types.LeadTagInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.LeadTag,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.LeadTagCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.LeadTag,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.LeadTagWhereUniqueInput,
        include: Optional[types.LeadTagInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.LeadTag,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.LeadTagUpdateInput,
        where: types.LeadTagWhereUniqueInput,
        include: Optional[types.LeadTagInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.LeadTag,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.LeadTagWhereUniqueInput,
        data: types.LeadTagUpsertInput,
        include: Optional[types.LeadTagInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.LeadTag,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.LeadTagUpdateManyMutationInput,
        where: types.LeadTagWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.LeadTag,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.LeadTagWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.LeadTag,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MessageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MessageCreateInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Message,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MessageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Message,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MessageUpdateInput,
        where: types.MessageWhereUniqueInput,
        include: Optional[types.MessageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Message,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MessageWhereUniqueInput,
        data: types.MessageUpsertInput,
        include: Optional[types.MessageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Message,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MessageUpdateManyMutationInput,
        where: types.MessageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Message,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MessageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Message,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CampaignBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CampaignCreateInput,
        include: Optional[types.CampaignInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.Campaign,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CampaignCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.Campaign,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CampaignWhereUniqueInput,
        include: Optional[types.CampaignInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.Campaign,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CampaignUpdateInput,
        where: types.CampaignWhereUniqueInput,
        include: Optional[types.CampaignInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.Campaign,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CampaignWhereUniqueInput,
        data: types.CampaignUpsertInput,
        include: Optional[types.CampaignInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.Campaign,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CampaignUpdateManyMutationInput,
        where: types.CampaignWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.Campaign,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CampaignWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.Campaign,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class AuditLogBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.AuditLogCreateInput,
        include: Optional[types.AuditLogInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.AuditLog,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.AuditLogCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.AuditLog,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AuditLogWhereUniqueInput,
        include: Optional[types.AuditLogInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AuditLogUpdateInput,
        where: types.AuditLogWhereUniqueInput,
        include: Optional[types.AuditLogInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.AuditLog,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AuditLogWhereUniqueInput,
        data: types.AuditLogUpsertInput,
        include: Optional[types.AuditLogInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.AuditLog,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AuditLogUpdateManyMutationInput,
        where: types.AuditLogWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.AuditLog,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AuditLogWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.AuditLog,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ApiKeyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ApiKeyCreateInput,
        include: Optional[types.ApiKeyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ApiKey,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ApiKeyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ApiKey,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ApiKeyWhereUniqueInput,
        include: Optional[types.ApiKeyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ApiKey,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ApiKeyUpdateInput,
        where: types.ApiKeyWhereUniqueInput,
        include: Optional[types.ApiKeyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ApiKey,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ApiKeyWhereUniqueInput,
        data: types.ApiKeyUpsertInput,
        include: Optional[types.ApiKeyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ApiKey,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ApiKeyUpdateManyMutationInput,
        where: types.ApiKeyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ApiKey,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ApiKeyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ApiKey,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class RateLimitBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.RateLimitCreateInput,
        include: Optional[types.RateLimitInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.RateLimit,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.RateLimitCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.RateLimit,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.RateLimitWhereUniqueInput,
        include: Optional[types.RateLimitInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.RateLimit,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.RateLimitUpdateInput,
        where: types.RateLimitWhereUniqueInput,
        include: Optional[types.RateLimitInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.RateLimit,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.RateLimitWhereUniqueInput,
        data: types.RateLimitUpsertInput,
        include: Optional[types.RateLimitInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.RateLimit,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.RateLimitUpdateManyMutationInput,
        where: types.RateLimitWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.RateLimit,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.RateLimitWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.RateLimit,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma